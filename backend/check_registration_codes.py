"""
Script para verificar los c√≥digos de registro de visitantes en la base de datos
"""
import sys
import os
from datetime import datetime

# Agregar el directorio ra√≠z al path para importar los modelos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models.visitor import Visitor, VisitorCheckIn
from models.event import Event

def check_registration_codes():
    """Verificar la integridad de los c√≥digos de registro"""
    with app.app_context():
        print("=== VERIFICACI√ìN DE C√ìDIGOS DE REGISTRO ===")
        print(f"Fecha: {datetime.now()}\n")
        
        # 1. Contar visitantes totales
        total_visitors = Visitor.query.count()
        print(f"Total de visitantes en la base de datos: {total_visitors}")
        
        # 2. Verificar visitantes sin c√≥digo
        visitors_without_code = Visitor.query.filter(
            db.or_(
                Visitor.registration_code == None,
                Visitor.registration_code == ''
            )
        ).all()
        
        if visitors_without_code:
            print(f"\n‚ö†Ô∏è  ADVERTENCIA: {len(visitors_without_code)} visitantes sin c√≥digo de registro:")
            for visitor in visitors_without_code:
                print(f"  - ID: {visitor.id}, Nombre: {visitor.name}, Email: {visitor.email}")
        else:
            print("\n‚úÖ Todos los visitantes tienen c√≥digo de registro")
        
        # 3. Verificar duplicados
        codes = {}
        duplicates = []
        all_visitors = Visitor.query.all()
        
        for visitor in all_visitors:
            if visitor.registration_code:
                if visitor.registration_code in codes:
                    duplicates.append((visitor, codes[visitor.registration_code]))
                else:
                    codes[visitor.registration_code] = visitor
        
        if duplicates:
            print(f"\n‚ö†Ô∏è  ADVERTENCIA: Se encontraron c√≥digos duplicados:")
            for visitor1, visitor2 in duplicates:
                print(f"  - C√≥digo '{visitor1.registration_code}' usado por:")
                print(f"    * ID: {visitor1.id}, Nombre: {visitor1.name}")
                print(f"    * ID: {visitor2.id}, Nombre: {visitor2.name}")
        else:
            print("\n‚úÖ No hay c√≥digos duplicados")
        
        # 4. Verificar formato de c√≥digos
        invalid_format = []
        for visitor in all_visitors:
            if visitor.registration_code:
                if len(visitor.registration_code) != 6 or not visitor.registration_code.isalnum():
                    invalid_format.append(visitor)
        
        if invalid_format:
            print(f"\n‚ö†Ô∏è  ADVERTENCIA: {len(invalid_format)} c√≥digos con formato inv√°lido:")
            for visitor in invalid_format:
                print(f"  - ID: {visitor.id}, C√≥digo: '{visitor.registration_code}' (longitud: {len(visitor.registration_code)})")
        else:
            print("\n‚úÖ Todos los c√≥digos tienen formato v√°lido (6 caracteres alfanum√©ricos)")
        
        # 5. Mostrar algunos ejemplos de c√≥digos
        print("\nüìã Ejemplos de c√≥digos registrados:")
        sample_visitors = Visitor.query.limit(10).all()
        for visitor in sample_visitors:
            print(f"  - {visitor.name}: '{visitor.registration_code}'")
        
        # 6. Verificar registros por evento
        print("\nüìä Registros por evento:")
        events = Event.query.all()
        for event in events:
            registrations = VisitorCheckIn.query.filter_by(event_id=event.id).count()
            print(f"  - {event.title}: {registrations} visitantes registrados")
        
        # 7. Buscar un c√≥digo espec√≠fico (ejemplo)
        test_code = "ABC123"
        print(f"\nüîç Prueba de b√∫squeda - C√≥digo '{test_code}':")
        test_visitor = Visitor.query.filter_by(registration_code=test_code).first()
        if test_visitor:
            print(f"  Encontrado: {test_visitor.name}, Email: {test_visitor.email}")
        else:
            print(f"  No se encontr√≥ ning√∫n visitante con el c√≥digo '{test_code}'")
        
        print("\n=== FIN DE LA VERIFICACI√ìN ===")

if __name__ == "__main__":
    check_registration_codes()
